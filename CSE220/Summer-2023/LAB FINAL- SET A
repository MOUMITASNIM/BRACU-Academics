{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1LaIMjp5eYwIpazsC7qeKQTBv8EwhRXHh","timestamp":1693190634575}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# **SETA LAB FINAL QUESTION:**\n","\n","Given a **Binary Tree**, find the sum of all **left** leaves in it.\n","For example, sum of all left leaves in below Binary Tree is 5+1=6.\n","        \n","         9                                      \n","        / \\                                  \n","      8    6                                   \n","     /\\   /                       \n","    5  2 1                                   \n","                                               \n","           \n","\n","For executing the problem, you have to complete the following **recursive functions, using loops is strictly prohibited:**\n","\n","**(i)isLeaf:** function to check if a given node is leaf or not\n","\n","**(ii)leftLeavesSum:** This function return sum of all left leaves in a given binary tree\n","\n","\n","                             "],"metadata":{"id":"LoG6WA2H5iTc"}},{"cell_type":"code","source":["class Node:\n","    def __init__(self, key):\n","        self.key = key\n","        self.left = None\n","        self.right = None\n","\n","def isLeaf(node):\n","    if  node == None:\n","        return False\n","    if  node.left==None and node.right == None:\n","        return True\n","    return False\n","\n","def leftLeavesSum(root):\n","    if not root:\n","        return 0\n","\n","    left_summation = 0\n","\n","    if isLeaf(root.left):\n","        left_summation += root.left.key\n","\n","    left_summation += leftLeavesSum(root.left)\n","    left_summation += leftLeavesSum(root.right)\n","\n","    return left_summation\n","\n","# Driver program to test above functions\n","root = Node(20)\n","root.left = Node(9)\n","root.right = Node(49)\n","root.right.left = Node(23)\n","root.right.right = Node(52)\n","root.right.right.left = Node(50)\n","root.left.left = Node(5)\n","root.left.right = Node(12)\n","root.left.right.right = Node(12)\n","\n","print(\"Sum of left leaves is\", leftLeavesSum(root))  # Should print 78"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xEjmxf-KKpq2","executionInfo":{"status":"ok","timestamp":1693195281531,"user_tz":-360,"elapsed":655,"user":{"displayName":"TASNIM RAHMAN MOUMITA","userId":"02442488685558107660"}},"outputId":"06646c44-97ca-4de9-864d-1147da374a69"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Sum of left leaves is 78\n"]}]},{"cell_type":"markdown","source":["# Question 2\n","Execute the following BST operations in your copy\n","\n","1.   Create a BST using the following elements of the nodes: 20, 10, 5, 60, 90, 40, 25, 100, 95, 50\n","2.   Remove 20 using in-order successor and show simulation\n","3.   Remove 60 using in-order predecessors and show simulation\n","4.   Balance the BST and show simulation\n","5.   Print the BST in in-order"],"metadata":{"id":"oI4a-0Ox5gYz"}}]}